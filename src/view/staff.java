/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;
/*
import database.DbConnection;
import controller.*;
import controller.staffController;
import java.awt.event.ActionEvent;
import model.*;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
//import database.*
import model.staffModel;
import java.sql.DriverManager;
import java.sql.Connection;
import java.awt.print.PrinterException;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import javax.swing.JTable;
//import java.util.logging.Level;
//import java.util.logging.Logger;

/**
 *
 * @author Dell
 */
public class staff extends javax.swing.JFrame {
//    PreparedStatement prepstmt = null;
//    
//    DefaultTableModel model = null;
//    
//    public staffModel mod;
//    private staffController controller;
//    private List<staffModel> staffList;
//    private staff staffObject;

    
    
    /*public staff() {
        initComponents();
//        mod = new staffModel();
mod=new staffModel(name.getText(),position.getText(),email.getText(),phone.getText());

        staffList = new ArrayList<>();
        controller=new staffController(mod,staffList,staffObject);

    }*/

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        email = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        position = new javax.swing.JTextField();
        name = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        phone = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        update = new javax.swing.JButton();
        savedata = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableStaffs = new javax.swing.JTable();
        txtPrint = new javax.swing.JButton();
        Show = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(0, 153, 153));
        jPanel3.setForeground(new java.awt.Color(255, 255, 255));
        jPanel3.setMinimumSize(new java.awt.Dimension(865, 430));

        jPanel1.setBackground(new java.awt.Color(0, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " New Staff", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Times New Roman", 0, 18), new java.awt.Color(255, 255, 255))); // NOI18N
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        email.setBackground(new java.awt.Color(0, 153, 153));
        email.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        email.setAutoscrolls(false);
        email.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Position");

        position.setBackground(new java.awt.Color(0, 153, 153));
        position.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        position.setAutoscrolls(false);
        position.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positionActionPerformed(evt);
            }
        });

        name.setBackground(new java.awt.Color(0, 153, 153));
        name.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        name.setAutoscrolls(false);
        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Phone Number");

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Name");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Email");

        btnAdd.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 255, 255));
        btnAdd.setText("Add");
        btnAdd.setBorderPainted(false);
        btnAdd.setContentAreaFilled(false);
        btnAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        phone.setBackground(new java.awt.Color(0, 153, 153));
        phone.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        phone.setAutoscrolls(false);
        phone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                phoneActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setText("Delete");
        btnDelete.setContentAreaFilled(false);
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        update.setBackground(new java.awt.Color(16, 101, 82));
        update.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        update.setForeground(new java.awt.Color(255, 255, 255));
        update.setText("Update");
        update.setContentAreaFilled(false);
        update.setDefaultCapable(false);
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        savedata.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        savedata.setForeground(new java.awt.Color(255, 255, 255));
        savedata.setText("Save Data");
        savedata.setBorderPainted(false);
        savedata.setContentAreaFilled(false);
        savedata.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        savedata.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savedataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(position, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(update)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(savedata))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(phone, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(position, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(phone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnDelete)
                    .addComponent(update)
                    .addComponent(savedata))
                .addGap(15, 15, 15))
        );

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("List of Staffs");

        jPanel2.setBackground(new java.awt.Color(0, 153, 153));

        tableStaffs.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        tableStaffs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Position", "Email", "Phone Number"
            }
        ));
        tableStaffs.setGridColor(new java.awt.Color(16, 101, 82));
        tableStaffs.setSelectionBackground(new java.awt.Color(16, 101, 82));
        tableStaffs.setShowGrid(true);
        tableStaffs.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableStaffsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tableStaffs);

        txtPrint.setForeground(new java.awt.Color(255, 255, 255));
        txtPrint.setText("Print");
        txtPrint.setBorderPainted(false);
        txtPrint.setContentAreaFilled(false);
        txtPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrintActionPerformed(evt);
            }
        });

        Show.setForeground(new java.awt.Color(255, 255, 255));
        Show.setText("Show Data");
        Show.setBorderPainted(false);
        Show.setContentAreaFilled(false);
        Show.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(Show)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtPrint)
                        .addGap(14, 14, 14))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPrint)
                    .addComponent(Show))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(319, 319, 319)
                .addComponent(jLabel5)
                .addContainerGap(383, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel5)
                .addGap(35, 35, 35)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(58, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void emailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailActionPerformed

    private void positionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_positionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_positionActionPerformed

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        /*String Name=name.getText();
        String Position=position.getText();
        String Email=email.getText();
        String Phone=phone.getText();
        
        controller.addStaff(Name, Position, Email, Phone);*/
        /*String Name=name.getText();
        String Position=position.getText();
        String Email=email.getText();
        String Phone=phone.getText();
        
        staffModel mod=new staffModel( Name,Position,Email,Phone);
        
        staffController con=new staffController(mod,this);
        con.addstaff(Name, Position, Email, Phone);
        */
        
        
//        if(name.getText().equals("") || position.getText().equals("") || email.getText().equals("") || phone.getText().equals("")){
//            JOptionPane.showMessageDialog(this, "Please enter all data");
//        }else{
//            String data[] = {name.getText(),position.getText(),email.getText(),phone.getText()};
//            DefaultTableModel model = (DefaultTableModel) tableStaffs.getModel();
//            model.addRow(data);
//            JOptionPane.showMessageDialog(this, "Data added auccessfully!!");
//        }
//        
//        name.setText("");
//        position.setText("");
//        email.setText("");
//        phone.setText("");
//                
//                
//                
//               
//                





    }//GEN-LAST:event_btnAddActionPerformed

    private void phoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_phoneActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_phoneActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
//        staffController controller= new staffController;
//      controller.deleteSelectedStaff();
     /*   int selectedRowIndex=tableStaffs.getSelectedRow();
     staffController con1=new staffController(mod, staffList, this);
                
//staffController con=new staffController(mod,this);
        System.out.println(this);
        con1.deleteSelectedStaff();
*/
//        DefaultTableModel model = (DefaultTableModel) tableStaffs.getModel();
//        
//        if(tableStaffs.getSelectedRowCount() ==1){
//            model.removeRow(tableStaffs.getSelectedRow());
//        }else{
//            if(tableStaffs.getRowCount()==0){
//                JOptionPane.showMessageDialog(this, "Table is empty!!");
//            }else{
//                JOptionPane.showMessageDialog(this, "Please select Single row for deletion");
//            }
//        }
//        
//        
//        
//        
//        
//        
//        
//        
//        
//        
//        
//        
//        
//        
////        int row = tableStaffs.getSelectedRow();
////
////        if(row<0){
////            JOptionPane.showMessageDialog(this,
////                "No row is selected! Please select one row",
////                "Select row",
////                JOptionPane.ERROR_MESSAGE);
////        }else{
////            DefaultTableModel model = (DefaultTableModel) tableStaffs.getModel();
////            model.removeRow(row);
////        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void savedataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savedataActionPerformed
        // TODO add your handling code here:

        
//        staffController controller = new staffController(new staffModel(), this);
        
        
        
        
//        DefaultTableModel model = (DefaultTableModel) tableStaffs.getModel();
////        String name, position, email, phone;
//        
//        if(model.getRowCount()==0){
//            JOptionPane.showMessageDialog(this,"Table is Empty");
//        }else{
//            try{
//                String Name, Position, Email, Phone;
//                Class.forName("com.mysql.cj.jdbc.Driver");
//                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/project","root","at123thapa");
//                for(int i = 0; i<model.getRowCount();i++){
//                    Name = model.getValueAt(i,0).toString();
//                    Position = model.getValueAt(i,1).toString();
//                    Email = model.getValueAt(i,2).toString();
//                    Phone = model.getValueAt(i,3).toString();
//                    
//                    
//                    String sql = "insert into staff(name,position,email,phone) values (?,?,?,?)";
//                    prepstmt = conn.prepareStatement(sql);
//                    prepstmt.setString(1,Name);
//                    prepstmt.setString(2,Position);
//                    prepstmt.setString(3,Email);
//                    prepstmt.setString(4,Phone);
//                    
//                    prepstmt.execute();
//                    
//                }
//                
//                JOptionPane.showMessageDialog(this,"Data insert successfully!!");
//                model.setRowCount(0);
//            }catch(Exception e){                
//            }        
//        }
//        
////        tableStaffs.setTableHeader("*******Staffs*******"+
////                "\n\n");
////                
////        
////        tableStaffs.setText(tableStaffs.getTableHeader()+"\n\n"+
////                "Name: " + name.getText()+"\n\n"+
////                "Position: " + position.getText()+"\n\n"+
////                "Email: " + email.getText()+"\n\n" +
////                "Phone Number: " + phone.getText()+"\n\n");
////        
////        
////        txtPrint.setText(txtPrint.getText());
    }//GEN-LAST:event_savedataActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        // TODO add your handling code here:
//        int selectedRow = tableStaffs.getSelectedRow();
        
//        String Name = name.getText();
//        String Position = position.getText();
//        String Email = email.getText();
//        String Phone = phone.getText();
//        staffController con1=new staffController(mod, staffList, Show);
//        
//        con1.updateStaff(Name, Position, Email, Phone);
//    /*    int selectedRowIndex=tableStaffs.getSelectedRow();
//        int id 
//        String Name=name.getText();
//        String Position=position.getText();
//        String Email=email.getText();
//        String Phone=phone.getText();
//        mod=new staffModel( id,Name,Position,Email,Phone);
//        
//        
//        staffController con=new staffController(mod,this);
//        con.updateStaff(id, Name, Position, Email, Phone);
//        */
////        DefaultTableModel model = (DefaultTableModel) tableStaffs.getModel();
////        if(tableStaffs.getSelectedRowCount()==1){
////            String Name = name.getText();
////            String Position = position.getText();
////            String Email = email.getText();
////            String Phone = phone.getText();
////            
////            
////            model.setValueAt(Name,tableStaffs.getSelectedRow(),0);
////            model.setValueAt(Position,tableStaffs.getSelectedRow(),1);
////            model.setValueAt(Email,tableStaffs.getSelectedRow(),2);
////            model.setValueAt(Phone,tableStaffs.getSelectedRow(),3);
////            
////            JOptionPane.showMessageDialog(this, "Update Successfully!!");
////        }else{
////            if(tableStaffs.getRowCount()==0){
////                JOptionPane.showMessageDialog(this, "Table is empty!!");
////            }else{
////                JOptionPane.showMessageDialog(this, "Please select single row for update!!");
////            }
////        }
////        
////        
////        
////        
    }//GEN-LAST:event_updateActionPerformed


    private void tableStaffsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableStaffsMouseClicked
        // TODO add your handling code here:
        // TODO add your handling code here:
//            int selectedRow = tableStaffs.getSelectedRow();
    
   /* // Check if a row is selected
    if (selectedRow >= 0) {
        // Retrieve the values from the selected row in the table
        String Name = tableStaffs.getValueAt(selectedRow, 0).toString();
        String Position = tableStaffs.getValueAt(selectedRow, 1).toString();
        String Email = tableStaffs.getValueAt(selectedRow, 2).toString();
        String Phone = tableStaffs.getValueAt(selectedRow, 3).toString();
        
        // Set the retrieved values in the corresponding text fields
        name.setText(Name);
        position.setText(Position);
        email.setText(Email);
        phone.setText(Phone);
    }
*/

//        DefaultTableModel model = (DefaultTableModel)tableStaffs.getModel();
//        String tblname = model.getValueAt(tableStaffs.getSelectedRow(),0).toString();
//        String tblposition = model.getValueAt(tableStaffs.getSelectedRow(),1).toString();
//        String tblemail = model.getValueAt(tableStaffs.getSelectedRow(),2).toString();
//        String tblphone = model.getValueAt(tableStaffs.getSelectedRow(),3).toString();
//        
//        name.setText(tblname);
//        position.setText(tblposition);
//        email.setText(tblemail);
//        phone.setText(tblphone);
//        
//        
//        
        
       
    }//GEN-LAST:event_tableStaffsMouseClicked

    private void txtPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrintActionPerformed
    /*   MessageFormat header = new MessageFormat("Test Report");
        MessageFormat footer = new MessageFormat("Page{0,number,integer}");
        try{
            tableStaffs.print();
        }
        catch(Exception e){
            System.out.println(e.getMessage());
        }
*/
    }//GEN-LAST:event_txtPrintActionPerformed

    private void ShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowActionPerformed
        // TODO add your handling code here:
        /*staffController con =new staffController(mod,this);
        con.showButtonActionPerformed();*/

////        setShow();
//    }
//    
//    public void setShow(){
//        
//        try{
//            Class.forName("com.mysql.cj.jdbc.Driver");
//            Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/project","root","at123thapa");
//            PreparedStatement pst = con.prepareStatement("select * from staff");
//            ResultSet rs = pst.executeQuery();
//            
//            while(rs.next()){
//                String name = rs.getString("name");
//                String position = rs.getString("position");
//                String email = rs.getString("email");
//                String phone = rs.getString("phone");
//                
//                Object[] obj = {name, position, email, phone};
//                
//                model = (DefaultTableModel)tableStaffs.getModel();
//                model.addRow(obj);
//            }
//            
//            
//            
//        }catch(Exception e){
//            e.printStackTrace();
//            
//        }
    }//GEN-LAST:event_ShowActionPerformed

//    public JTable tableStaffsl(){
//        JPanel tablePanel=new JPanel();
//        
//        tableStaffs=new JTable();
//        tableStaffs.
//        )setModel(new DefaultTableModel(
//                new Object [][]{},
//                new String []{"Name","Position","Email","Phone Number"}
//        ));
//        return tablePanel;
//    }
//    
/*    public JTable gettableStaffs(){
        return tableStaffs;
    }
    
    public void addRowToTable(String name, String position, String email, String phone) {
        DefaultTableModel model = (DefaultTableModel) tableStaffs.getModel();
        model.addRow(new Object[]{name, position, email, phone});
    }
    public void removeRowFromTable(int selectedRow) {
        DefaultTableModel tableModel = (DefaultTableModel) tableStaffs.getModel();
        
        // Check if the selected row is within the valid range
        if (selectedRow >= 0 && selectedRow < tableModel.getRowCount()) {
            // Remove the row from the table model
            tableModel.removeRow(selectedRow);
        }
    }    
    
    public void updateRowInTable(int rowIndex, String name, String position, String email, String phone) {
        DefaultTableModel tableModel = (DefaultTableModel) tableStaffs.getModel();
        
        // Check if the rowIndex is within the valid range
        if (rowIndex >= 0 && rowIndex < tableModel.getRowCount()) {
            // Update the values in the corresponding row
            tableModel.setValueAt(name, rowIndex, 0); // Assuming name is in column 0
            tableModel.setValueAt(position, rowIndex, 1); // Assuming position is in column 1
            tableModel.setValueAt(email, rowIndex, 2); // Assuming email is in column 2
            tableModel.setValueAt(phone, rowIndex, 3); // Assuming phone is in column 3
        }
    }
        
 
    public void clearFields(){
        name.setText("");
        position.setText("");
        email.setText("");
        phone.setText("");
        tableStaffs.clearSelection();
    }
//
    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(staff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(staff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(staff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(staff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new staff().setVisible(true);
            }
        });
    }
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Show;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JTextField email;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField name;
    private javax.swing.JTextField phone;
    private javax.swing.JTextField position;
    private javax.swing.JButton savedata;
    private javax.swing.JTable tableStaffs;
    private javax.swing.JButton txtPrint;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
}
